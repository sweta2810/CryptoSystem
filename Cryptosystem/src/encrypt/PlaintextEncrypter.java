package encrypt;

public class PlaintextEncrypter implements Encrypter{

<<<<<<< HEAD
	/**
	 * Encrypts a BigInteger matrix with a BigInteger public key as generated by the KeyGen class.
	 * @param plaintext a BigInteger matrix containing the plaintext to be encrypted
	 * @param publickey a public key generated by the KeyGen class.
	 * @return a BigInteger matrix containing the ciphertext.
	 */
	
	public BigInteger[][] encrypt(BigInteger[][] plaintext, BigInteger[][] publicKey) {
		MatrixAdapter ma = new BigIntegerMatrixOperations();
		MatrixGen gen = new MatrixGen(); 
		BigInteger[][] ranMatrix = gen.generateRandomMatrix();
		//TODO get random distrobution matrix, this is a dummy matrix
		BigIneger[][] X = null;
		//need to create a MatrixAdapter operation for a matrix times a scalar and for the modd operation
		//remember that matrix multiplyication is not commutative. The order may need to be altered here...
		BigInteger outMatrix = ma.add(ma.add(ma.multiply(publicKey, ranMatrix), ma.multiply(2, X)), plaintext); //mod q, this operation is not yet implemented.
		return outMatrix;
=======
	public long[][] encrypt(long[][] plaintext, long[][] publicKey) {
		// TODO Auto-generated method stub
		return null;
>>>>>>> branch 'master' of https://aacurtis@bitbucket.org/aacurtis/shcryptosystem.git
	}

}
